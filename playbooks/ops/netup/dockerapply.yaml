---
- name: Query Indy docker network
  command: >-
    docker network ls -f name={{ NETNAME }} -q
  register: netstat

- name: Create indy docker network if it does not exist
  command: "docker network create {{ NETNAME }}"
  when: netstat.stdout == ""

- name: Create volumes for validator nodes
  command: >-
    docker volume create {{ item.fullname }}
  with_items:
    - "{{ allvalidators }}"

# - name: "Process keys"
#   include_tasks: "{{ pjroot }}/playbooks/common/processkeys.yaml"

- name: Create env file for all nodes
  template:
    src: "{{ pjroot }}/playbooks/ops/netup/templates/{{ item.type }}env.j2"
    dest: "{{ pjroot }}/vars/run/{{ item.fullname }}.env"
  with_items: "{{ allvalidators }}"

- name: Set absolute mounting path
  set_fact:
    mpath: "{{hostroot}}/vars/keyfiles/validatorOrganizations"

- name: Start all validator nodes
  command: >-
    docker run --network {{ NETNAME }} --name {{ item.fullname }} --hostname {{ item.fullname }}
    --env-file {{ pjroot }}/vars/run/{{ item.fullname }}.env {{ item.portmap }}
    -v {{ mpath }}/{{item.org}}/validators/{{item.fullname}}/log_indy:/var/log/indy
    {{ container_options }}
    alanveloso/indy-validator:{{ indy.release }}
  with_items: "{{ allvalidators }}"
  register: validatorstat
  ignore_errors: yes

- name: "Check errors"
  when: validatorstat.failed is defined and validatorstat.failed == true
  block:
  - name: Error!
    debug:
      msg: "{{ validatorstat.results[0].stderr }}"
    tags: [print_action]

  - name: Exit play when there is an error
    meta: end_play
